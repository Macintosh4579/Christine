#! /usr/bin/env python
# -*- coding: latin-1 -*-

## Copyright (c) 2006 Marco Antonio Islas Cruz
## <markuz@islascruz.org>
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.



import gtk
import os
import gobject
import gconf
import os.path
import gtk.glade
import logging

class glade_xml:
	def __init__(self,file,root=None):
		'''constructor, receives the name of the interface descriptor 
		and then initialize gtk.glade.XML'''
		locale_dir = "@datadir@/locale/"
		gtk.glade.bindtextdomain("@programname@",locale_dir)
		gtk.glade.textdomain("@programname@")
		self.__xml = gtk.glade.XML(file,root,None)
		self.get_widget = self.__xml.get_widget

	def __getitem__(self,widget):
		'''
		returns the widget according to the name of the widget.
		This lets the instance work like a dictionary
		'''
		return self.__xml.get_widget(widget)

	def signal_autoconnect(self,signals):
		'''
		Signal autoconnect wrapper.
		'''
		self.__xml.signal_autoconnect(signals)

class GtkMisc:
	def __init__(self):
		self.__Logger = logging.getLoger('GtkMisc')
		if os.path.isdir(os.path.join(os.getcwd(),"./gui/pixmaps/")):
			self.wdir = os.path.join(os.getcwd(),"./gui/pixmaps/")
		else:
			self.wdir = "@datadir@/christine/gui/pixmaps"

	def gen_pixbuf(self,imagefile):
		'''Create a pixbuf from  a file'''
		#try:
		pixbuf = gtk.gdk.pixbuf_new_from_file(os.path.join(self.wdir,imagefile))
		return pixbuf
		#except:
		#	raise IOError,"There is no pixmap called %s"%imagefile
	
	def set_image(self,widget,filename):
		image = gtk.Image()
		image.set_from_pixbuf(self.gen_pixbuf(filename))
		widget.set_image(image)
		
	def image(self,filename):
		image = gtk.Image()
		image.set_from_pixbuf(self.gen_pixbuf(filename))
		image.show()
		return image

	def set_toolbutton_image(self,widget,filename):
		image = self.image(filename)
		widget.set_icon_widget(image)
	
	def strip_XML_entities(self,text):
		entities = {"&":"&amp;",}	
		for i in entities.keys():
			text = text.replace(i,entities[i])
		return text
	
class error:
	def __init__(self,text):
		if os.path.isdir("./gui/"):
			path = "./gui"
		else:
			path = os.path.join("@datadir@","christine","gui")
		xml = glade_xml(os.path.join(path,"Error.glade"))
		dialog		= xml["dialog"]
		error_label = xml["error"]
		error_label.set_text(text)
		dialog.run()
		dialog.destroy()
